import traceback

from aiogram import Router, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ChatMemberOwner, ChatMemberAdministrator, ChatMemberMember
from aiogram.utils.deep_linking import create_start_link
from aiogram.utils.payload import decode_payload

from Bot.utils import getUserName, pointWords, addUserXP
from BotTG import keyboard, states
from config import config
from config.config import TG_PUBLIC_CHAT_ID
from db import pool

router: Router = Router()


@router.callback_query(keyboard.Callback.filter(F.type == 'joingiveaway'))
async def joingiveaway(query: CallbackQuery, state: FSMContext):
    try:
        member = await query.bot.get_chat_member(chat_id=config.TG_PUBLIC_CHAT_ID, user_id=query.from_user.id)
        if not isinstance(member, (ChatMemberOwner, ChatMemberAdministrator, ChatMemberMember)):
            raise Exception
    except:
        return await query.answer(text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã.', show_alert=True)
    async with (await pool()).connection() as conn:
        async with conn.cursor() as c:
            vkid = await (await c.execute('select vkid from tglink where tgid=%s', (query.from_user.id,))).fetchone()
    if not vkid:
        return await query.answer(text='–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.', show_alert=True)

    async with (await pool()).connection() as conn:
        async with conn.cursor() as c:
            await c.execute('insert into tggiveawayusers (tgid) values (%s) on conflict (tgid) do nothing',
                            (query.from_user.id,))
            await conn.commit()
            count = await (await c.execute('select count(*) as c from tggiveawayusers')).fetchone()
    try:
        await query.message.edit_reply_markup(reply_markup=keyboard.joingiveaway(count[0]))
    except:
        pass
    await query.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.', show_alert=True)


@router.message(CommandStart(deep_link=True))
async def startdeep(message: Message, state: FSMContext, command: CommandObject):
    await message.delete()
    payload = decode_payload(command.args)
    if not payload.isdigit():
        payload = 0
    async with (await pool()).connection() as conn:
        async with conn.cursor() as c:
            await c.execute('insert into tgwaitingforsubscription (tgid) values (%s) on conflict (tgid) do nothing ',
                            (message.from_user.id,))
            await conn.commit()
    msg = await message.bot.send_message(
        chat_id=message.from_user.id, reply_markup=keyboard.check(int(payload)),
        text=f'<b>‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}'
             f'</a>.\n\n–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ <a href="'
             f'{(await message.bot.create_chat_invite_link(TG_PUBLIC_CHAT_ID)).invite_link}">–Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ</a>.</b>',)
    await state.clear()
    await state.update_data(msg=msg)


@router.callback_query(keyboard.Callback.filter(F.type == 'start'))
@router.message(CommandStart(), F.chat.type == "private")
async def start(message: Message | CallbackQuery, state: FSMContext):
    async with (await pool()).connection() as conn:
        async with conn.cursor() as c:
            if await (await c.execute('select id from tgwaitingforsubscription where tgid=%s',
                                      (message.from_user.id,))).fetchone():
                return
            if isinstance(message, Message):
                await message.delete()
            vkid = await (await c.execute('select vkid from tglink where tgid=%s', (message.from_user.id,))).fetchone()
    if not vkid:
        msg = await message.bot.send_message(
            chat_id=message.from_user.id, reply_markup=keyboard.link(),
            text=f'<b>‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}'
                 f'</a>.\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –≤ '
                 f'–∫–æ–Ω–∫—É—Ä—Å–µ.\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 150 –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤ –Ω–∞—à—É '
                 f'–≥—Ä—É–ø–ø—É.</b>',)
    else:
        msg = await message.bot.send_message(
            chat_id=message.from_user.id, reply_markup=keyboard.unlink(),
            text=f'<b>‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="https://vk.com/id{vkid[0]}">{await getUserName(vkid[0])}</a>.\n\n'
                 f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –í–ö, —Ç–µ–ø–µ—Ä—å –≤ —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞ –æ–ø—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç.'
                 f'\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 150 –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É.</b>',)
    await state.clear()
    await state.update_data(msg=msg)


@router.callback_query(keyboard.Callback.filter(F.type == 'link'))
async def link(query: CallbackQuery, state: FSMContext):
    msg = await query.bot.send_message(
        chat_id=query.from_user.id, reply_markup=keyboard.back(),
        text=f'<b>üìù –û—Ç–∫—Ä–æ–π—Ç–µ <a href="https://vk.com/im?sel=-222139436">–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º Star Manager</a> –≤–æ '
             f'–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/code</code>. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—é–¥–∞.'
             f'</b>')
    await state.clear()
    await state.set_state(states.Link.link.state)
    await state.update_data(msg=msg)


@router.callback_query(keyboard.Callback.filter(F.type == 'unlink'))
async def unlink(query: CallbackQuery, state: FSMContext):
    async with (await pool()).connection() as conn:
        async with conn.cursor() as c:
            if (await c.execute('update tglink set tgid=null where tgid=%s', (query.from_user.id,))).rowcount:
                text = f'<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç.</b>'
                await conn.commit()
            else:
                text = f'<b>‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.</b>'
    msg = await query.bot.send_message(chat_id=query.from_user.id, reply_markup=keyboard.back(), text=text)
    await state.clear()
    await state.update_data(msg=msg)


@router.callback_query(keyboard.Callback.filter(F.type == 'ref'))
async def ref(query: CallbackQuery, state: FSMContext):
    async with (await pool()).connection() as conn:
        async with conn.cursor() as c:
            cnt = (await (await c.execute('select count(*) as c from tgreferrals where fromtgid=%s',
                                          (query.from_user.id,))).fetchone())[0]
    msg = await query.bot.send_message(
        chat_id=query.from_user.id, reply_markup=keyboard.back(),
        text=f'<b>üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –±–æ—Ç–∞ –≤ Telegram –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ '
             f'–ø–æ 150 –æ–ø—ã—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç:\n\n<code>'
             f'{await create_start_link(query.bot, str(query.from_user.id), encode=True)}</code>\n\nüí° '
             f'–í–∞–º–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {pointWords(cnt, ("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))}</b>')
    await state.clear()
    await state.update_data(msg=msg)


@router.callback_query(keyboard.Callback.filter(F.type.startswith('checksub_')))
async def checksub(query: CallbackQuery, state: FSMContext):
    try:
        member = await query.bot.get_chat_member(chat_id=config.TG_PUBLIC_CHAT_ID, user_id=query.from_user.id)
        if not isinstance(member, (ChatMemberOwner, ChatMemberAdministrator, ChatMemberMember)):
            raise Exception
    except:
        return await query.answer(text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã.', show_alert=True)
    if (ref := int(query.data.split(':')[-1].split('_')[-1])) and ref != query.from_user.id:
        async with (await pool()).connection() as conn:
            async with conn.cursor() as c:
                await c.execute('delete from tgwaitingforsubscription where tgid=%s', (query.from_user.id,))
                if not (await (await c.execute('select id from tgreferrals where tgid=%s',
                                               (query.from_user.id,))).fetchone()) and (
                        vkid := await (await c.execute('select vkid from tglink where tgid=%s', (ref,))).fetchone()):
                    await c.execute('insert into tgreferrals (fromtgid, tgid) values (%s, %s)',
                                    (int(ref), query.from_user.id))
                    await addUserXP(vkid[0], 150)
                    try:
                        await query.bot.send_message(
                            chat_id=ref, text=f'<b>üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id='
                                              f'{query.from_user.id}">{query.from_user.first_name}</a> –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –ø–æ '
                                              f'–≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ <code>+150 –æ–ø—ã—Ç–∞</code>.</b>',)
                    except:
                        traceback.print_exc()
                await conn.commit()
    msg = await query.bot.send_message(
        chat_id=query.from_user.id, reply_markup=keyboard.link(),
        text=f'<b>‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id={query.from_user.id}">{query.from_user.first_name}'
             f'</a>.\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –≤ '
             f'–∫–æ–Ω–∫—É—Ä—Å–µ.\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 150 –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤ –Ω–∞—à—É '
             f'–≥—Ä—É–ø–ø—É.</b>',)
    await state.clear()
    await state.update_data(msg=msg)


@router.message(states.Link.link)
async def link(message: Message, state: FSMContext):
    await message.delete()

    await state.clear()
    async with (await pool()).connection() as conn:
        async with conn.cursor() as c:
            vkid = await (await c.execute('select vkid from tglink where code=%s', (message.text,))).fetchone()
            if not vkid:
                text = f'<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ <code>/code</code>:</b>'
                await state.set_state(states.Link.link.state)
            else:
                text = f'<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç(<a href="https://vk.com/id{vkid[0]}">id{vkid[0]}</a>).</b>'
                await c.execute('update tglink set tgid = %s where vkid=%s', (message.from_user.id, vkid[0],))
                await conn.commit()
    msg = await message.bot.send_message(chat_id=message.from_user.id, reply_markup=keyboard.back(), text=text)
    await state.update_data(msg=msg)
